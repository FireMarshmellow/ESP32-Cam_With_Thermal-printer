#include "esp_camera.h"
#include "FS.h"               // File System library for SD_MMC
#include "SD_MMC.h"           // SD card library for ESP32-CAM
#include "soc/soc.h"          // To disable the brownout detector
#include "soc/rtc_cntl_reg.h" // To disable the brownout detector
#include "driver/rtc_io.h"
#include <EEPROM.h>           // To store our picture counter

// Define EEPROM size (1 byte for 0-255 picture counter)
#define EEPROM_SIZE 1

// Define the GPIO pin used for the capture trigger button.
#define BUTTON_PIN 13  // Connect a momentary pushbutton between GPIO13 and GND

// AI Thinker ESP32-CAM pin definitions:
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// Global picture counter (persisted in EEPROM)
int pictureNumber = 0;

void initCamera() {
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  
  if (psramFound()){
    config.frame_size = FRAMESIZE_UXGA;  // e.g., 1600x1200
    config.jpeg_quality = 10;
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;    // e.g., 800x600
    config.jpeg_quality = 12;
    config.fb_count = 1;
  }
  
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x\n", err);
  }
}

void initSDCard() {
  // Try to mount the SD card in 1-bit mode (this has helped many users)
  if (!SD_MMC.begin("/sdcard", true)) {
    Serial.println("SD Card Mount Failed");
    return;
  }
  uint8_t cardType = SD_MMC.cardType();
  if (cardType == CARD_NONE) {
    Serial.println("No SD Card attached");
    return;
  }
}

void captureAndSavePhoto() {
  // Capture an image from the camera
  camera_fb_t * fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }
  
  // Read current picture counter from EEPROM and increment
  EEPROM.begin(EEPROM_SIZE);
  pictureNumber = EEPROM.read(0) + 1;
  
  // Create filename like "/picture1.jpg"
  String path = "/picture" + String(pictureNumber) + ".jpg";
  fs::FS &fs = SD_MMC;
  Serial.printf("Picture file name: %s\n", path.c_str());
  
  // Attempt to open the file for writing
  File file = fs.open(path.c_str(), FILE_WRITE);
  if (!file) {
    Serial.println("Failed to open file in writing mode");
  } else {
    // Write image data to file
    file.write(fb->buf, fb->len);
    Serial.printf("Saved file to path: %s\n", path.c_str());
    // Save the new picture number back to EEPROM
    EEPROM.write(0, pictureNumber);
    EEPROM.commit();
  }
  file.close();
  
  // Return the frame buffer
  esp_camera_fb_return(fb);
}

void setup() {
  // Disable brownout detection to avoid unwanted resets
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
  
  Serial.begin(115200);
  delay(1000);
  
  // Configure the button pin; using internal pull-up so button press pulls it LOW
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  
  // Initialize the camera and SD card (only once)
  initCamera();
  initSDCard();
  
  // Initialize EEPROM for picture counter
  EEPROM.begin(EEPROM_SIZE);
  Serial.println("System ready. Press the button to capture a photo.");
}

void loop() {
  // Poll the button continuously
  if (digitalRead(BUTTON_PIN) == LOW) {
    Serial.println("Button pressed! Capturing photo...");
    captureAndSavePhoto();
    
    // Debounce: wait while button is still pressed and then a short extra delay
    while (digitalRead(BUTTON_PIN) == LOW) {
      delay(50);
    }
    delay(300); // additional debounce delay
  }
  
  // Add a short delay to prevent tight loop spinning
  delay(10);
}
